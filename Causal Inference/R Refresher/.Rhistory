install.packages(knitr, tidyverse)
install.packages(tidyverse)
install.packages("knitr". "tidyverse")
install.packages("knitr", "tidyverse")
install.packages("knitr", "tidyverse")
ggplot(iris) + geom_point(aes(x=Sepal.Width, y=Sepal.Length, col=Species))
library(tidyverse)
install.packages(tidyverse)
install.packages('tidyverse')
library(tidyverse)
ggplot(iris) + geom_point(aes(x=Sepal.Width, y=Sepal.Length, col=Species))
2.68/(sqrt(12))
.58/.77
library(tidyverse)
library(readr)
setwd("C:/Users/Anike/Dropbox/Trademark Rebrand Project")
FreqTable <- read.csv("Frequency Table of Prior Marks by Year.csv")
OnePrior <- FreqTable %>%
filter(prior_regs == 1) %>%
ggplot() + geom_point(aes(x=Year, y=n)) + ggtitle("Instances of One Prior Registration Over Time") + xlab("Year") + ylab("Number of Instances") + geom_vline(xintercept=1975)
OnePrior
View(FreqTable)
#Assignment using <- or =
x <- 1
x
y = 2
y
#Check equality using ==
x == y
x != y
x
pets_vector <- c('dog', 'cat', 'parrot')
pets_list <- list('dog', 'cat', 'parrot')
num_vector <- c(1, 2, 3)
mixed_data <- c(1, 'dog', 2, 'cat')
dog <- 'dog'
class(pets_vector)
class(pets_list)
class(num_vector)
class(mixed_data)
class(dog)
for (pet in pets_vector) {
print(pet)
}
numbers <- 1:1000000
print(system.time(numbers_log_vec <- log(numbers)))
numbers_for_loop <- list()
print(system.time(for (number in numbers) {
numbers_for_loop[number] <- log(number)
}))
numbers_for_loop <- list(numbers)
print(system.time(for (number in numbers) {
numbers_for_loop[number] <- log(number)
}))
minus_one <- function(num) {
nums_minus_one <- num - 1
return(nums_minus_one)
}
minus_one_list <- list()
system.time(for (num in numbers) {
minus_one_list[num] <- minus_one(num)
})
system.time(apply_minus_one <- sapply(numbers, minus_one))
apply_minus_one[1]
getwd()
setwd("C:/Users/Anike/Documents/Computational-Social-Science-Training-Program/Causal Inference/R Refresher")
#install.packages('here')
here::i_am('R Refresher.Rmd')
library(here)
setwd(here())
getwd()
here()
library(readr)
df <- read_csv("../../data/strength.csv")
head(df)
names(df)
dim(df)
setwd("../../../")
getwd()
here()
setwd(here())
getwd()
dir <- here()
setwd(dir)
class(dir)
class(here())
#Add a column that creates a new variable y_2 as y times 2 using tidyverse tools
#install.packages("dplyr")
#library(tidyverse)
library(dplyr)
#Add a column that creates a new variable y_2 as y times 2 using tidyverse tools
#install.packages("dplyr")
#library(tidyverse)
library(dplyr)
head(df)
df = mutate(df, y_2 = y*2)
head(df)
#Select or drop columns using the select() function
df = select(df, -y_2)
head(df)
#piping
tidy_df <- df %>%
rename(treatment = tx) %>%
mutate(rescale_y = y * 1000)
head(tidy_df)
#filtering
df_id1 <- filter(df, id == 1)
dim(df_id1)
#We can also filter by more than one condition
filter(df, id == 1, time == 1)
#Or using an OR statement
filter(df, time == 1 | time == 7)
#summarizing
tidy_df %>%
group_by(time) %>%
summarize(mean_strength = mean(y, na.rm=TRUE),
standard_deviation_y = sd(y, na.rm=TRUE))
#library("tidyverse")
#X1 and X2 are independently generated normal random variables
X1 <- rnorm(n = 100, mean = 5, sd = 1)
X2 <- rnorm(n = 100, mean = 5, sd = 10)
#And they don't appear to be related
plot(x = X1, y = X2)
cor(X1, X2)
#Here X3 depends on X1
X3 <- rnorm(n = 100, mean = X1, sd = 1)
#And from a visual inspection they appear to be associated
plot(x = X1, y = X3)
cor(X1, X3)
#We can put these three random variables together in a data frame
rand_nums = tibble(X1, X2, X3) #Similar to data.frame() function
head(rand_nums)
#We could now work with these randomly generated numbers in this data frame, e.g., to fit a model or estimate a parameter of interest (later).
tidy_df %>% ggplot()
library(ggplot2)
tidy_df %>% ggplot()
tidy_df %>%
ggplot() +
geom_point(aes(x = time, y = rescale_y)) +
ggtitle("Tidy DF Plot") +
xlab("Time") +
ylab("Rescaled Y")
tidy_df %>%
ggplot() +
geom_point(aes(x = time, y = rescale_y)) +
ggtitle("Tidy DF Plot") +
xlab("Time") +
ylab("Rescaled Y")
tidy_df %>%
ggplot() +
geom_point(aes(x = time, y = rescale_y)) +
ggthemes::theme_fivethirtyeight() +
theme(axis.title = element_text()) +
ggtitle("Tidy DF Plot") +
xlab("Time") +
ylab("Rescaled Y")
tidy_df %>%
filter(time == 7) %>%
group_by(treatment) %>%
summarize(mean_strength = mean(y, na.rm=TRUE))
tidy_df %>% ggplot() + geom_bar(aes(x = treatment))
head(tidy_df)
tidy_df %>%
filter(time == 7) %>%
group_by(treatment) %>%
summarize(mean_strength = mean(y, na.rm=TRUE)) %>%
ggplot() +
geom_bar(aes(x = treatment, y = mean_strength, fill = treatment),
stat = 'identity') +
ggthemes::theme_fivethirtyeight() +
theme(axis.title = element_text()) +
ggtitle("Mean Strength by Treatment") +
xlab("Treatment") +
ylab("Mean Strength")
tidy_df %>%
filter(time == 7) %>%
group_by(treatment) %>%
summarize(mean_strength = mean(y, na.rm=TRUE)) %>%
ggplot() +
geom_bar(aes(x = treatment, y = mean_strength, fill = treatment),
stat = 'identity') +
ggthemes::theme_fivethirtyeight() +
theme(axis.title = element_text()) +
ggtitle("Mean Strength by Treatment") +
xlab("Treatment") +
ylab("Mean Strength")
tidy_df %>%
filter(time == 7) %>%
group_by(treatment) %>%
summarize(mean_strength = mean(y, na.rm=TRUE)) %>%
ggplot() +
geom_bar(aes(x = treatment, y = mean_strength),
stat = 'identity') +
ggthemes::theme_fivethirtyeight() +
theme(axis.title = element_text()) +
ggtitle("Mean Strength by Treatment") +
xlab("Treatment") +
ylab("Mean Strength")
head(tidy_df)
